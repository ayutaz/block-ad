name: iOS CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ios/**'
      - 'core/**'
      - '.github/workflows/ios.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'ios/**'
      - 'core/**'
  workflow_dispatch:

jobs:
  build:
    name: Build and Test iOS
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-ios,aarch64-apple-ios-sim,x86_64-apple-ios
    
    - name: Cache Rust build
      uses: actions/cache@v4
      with:
        path: |
          core/target
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-rust-ios-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build Rust libraries for iOS
      run: |
        cd core
        cargo build --release --target x86_64-apple-ios
        cargo build --release --target aarch64-apple-ios-sim
        cargo build --release --target aarch64-apple-ios
    
    - name: Create XCFramework
      run: |
        cd ios
        mkdir -p AdBlockCoreFFI.xcframework
        
        # Create fat library for simulator
        lipo -create \
          ../core/target/x86_64-apple-ios/release/libadblock_core.a \
          ../core/target/aarch64-apple-ios-sim/release/libadblock_core.a \
          -output ./libadblock_core_sim.a
        
        # Copy the device library
        cp ../core/target/aarch64-apple-ios/release/libadblock_core.a ./libadblock_core_device.a
        
        # Create XCFramework without headers (we'll use bridging header)
        xcodebuild -create-xcframework \
          -library ./libadblock_core_sim.a \
          -library ./libadblock_core_device.a \
          -output AdBlockCoreFFI.xcframework
    
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_15.0.app
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Run SwiftLint
      run: cd ios && swiftlint lint || true
    
    - name: Build iOS app for simulator
      run: |
        cd ios
        # Ensure bridging header exists
        echo "Checking for bridging header..."
        ls -la AdBlock/AdBlock-Bridging-Header.h || true
        
        # Check XCFramework contents
        echo "Checking XCFramework..."
        ls -la AdBlockCoreFFI.xcframework/ || true
        
        # Build for simulator
        xcodebuild build \
          -scheme AdBlock \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
          -derivedDataPath build \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          SWIFT_OBJC_BRIDGING_HEADER="AdBlock/AdBlock-Bridging-Header.h" \
          LIBRARY_SEARCH_PATHS="$(SRCROOT)/AdBlockCoreFFI.xcframework/ios-x86_64-simulator"
    
    - name: Build iOS app for device
      run: |
        cd ios
        # Build for device (archive)
        xcodebuild archive \
          -scheme AdBlock \
          -sdk iphoneos \
          -archivePath build/AdBlock.xcarchive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          DEVELOPMENT_TEAM="" \
          SWIFT_OBJC_BRIDGING_HEADER="AdBlock/AdBlock-Bridging-Header.h" \
          LIBRARY_SEARCH_PATHS="$(SRCROOT)/AdBlockCoreFFI.xcframework/ios-arm64"
    
    # Skip IPA export for CI builds without proper signing
    # - name: Export IPA
    #   run: |
    #     cd ios
    #     # Create export options plist
    #     cat > ExportOptions.plist << EOF
    #     <?xml version="1.0" encoding="UTF-8"?>
    #     <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    #     <plist version="1.0">
    #     <dict>
    #         <key>method</key>
    #         <string>development</string>
    #         <key>compileBitcode</key>
    #         <false/>
    #         <key>stripSwiftSymbols</key>
    #         <true/>
    #         <key>signingStyle</key>
    #         <string>automatic</string>
    #     </dict>
    #     </plist>
    #     EOF
    #     
    #     # Export IPA
    #     xcodebuild -exportArchive \
    #       -archivePath build/AdBlock.xcarchive \
    #       -exportPath build/ipa \
    #       -exportOptionsPlist ExportOptions.plist \
    #       -allowProvisioningUpdates
    
    - name: Run iOS tests
      run: |
        cd ios
        xcodebuild test \
          -scheme AdBlock \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
          -derivedDataPath build \
          -enableCodeCoverage YES \
          SWIFT_OBJC_BRIDGING_HEADER="AdBlock/AdBlock-Bridging-Header.h" \
          LIBRARY_SEARCH_PATHS="$(SRCROOT)/AdBlockCoreFFI.xcframework/ios-x86_64-simulator"
    
    - name: Display build info
      run: |
        echo "### iOS Build Information ###"
        # if [ -f "ios/build/ipa/AdBlock.ipa" ]; then
        #   echo "IPA size: $(du -h ios/build/ipa/AdBlock.ipa | cut -f1)"
        # else
        #   echo "IPA not found, checking for unsigned app..."
        if [ -d "ios/build/AdBlock.xcarchive" ]; then
          echo "Archive created successfully"
        else
          echo "Archive not found"
          find ios/build -name "*.app" -type d | head -5
        fi
        echo "Build number: ${{ github.run_number }}"
        echo "Commit: ${{ github.sha }}"
    
    - name: Upload simulator build
      uses: actions/upload-artifact@v4
      with:
        name: AdBlock-iOS-Simulator-${{ github.run_number }}
        path: ios/build/Build/Products/Debug-iphonesimulator/*.app
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload IPA (if available)
      uses: actions/upload-artifact@v4
      with:
        name: AdBlock-iOS-unsigned-${{ github.run_number }}
        path: ios/build/ipa/AdBlock.ipa
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload XCArchive
      uses: actions/upload-artifact@v4
      with:
        name: AdBlock-iOS-xcarchive-${{ github.run_number }}
        path: ios/build/AdBlock.xcarchive
        retention-days: 7
        if-no-files-found: warn
        
    - name: Generate test report
      continue-on-error: true
      uses: kishikawakatsumi/xcresulttool@v1
      with:
        path: ios/build/Logs/Test/*.xcresult
        upload-bundles: true
      if: success() || failure()
    
    - name: Create job summary
      run: |
        echo "## iOS Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Artifacts" >> $GITHUB_STEP_SUMMARY
        if [ -f "ios/build/ipa/AdBlock.ipa" ]; then
          echo "- **IPA File:** $(du -h ios/build/ipa/AdBlock.ipa | cut -f1)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Simulator Build:** Available" >> $GITHUB_STEP_SUMMARY
        echo "- **XCArchive:** Available for re-signing" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Download Links" >> $GITHUB_STEP_SUMMARY
        echo "The iOS builds are available as artifacts in this workflow run." >> $GITHUB_STEP_SUMMARY
        echo "- [Download All Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation Notes" >> $GITHUB_STEP_SUMMARY
        echo "⚠️ **Important:** The IPA file is unsigned and requires:" >> $GITHUB_STEP_SUMMARY
        echo "1. An Apple Developer account for signing" >> $GITHUB_STEP_SUMMARY
        echo "2. Provisioning profiles for your devices" >> $GITHUB_STEP_SUMMARY
        echo "3. Re-signing with your development certificate" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "For testing in simulator, use the Simulator build artifact." >> $GITHUB_STEP_SUMMARY