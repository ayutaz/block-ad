name: iOS CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ios/**'
      - 'core/**'
      - '.github/workflows/ios.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'ios/**'
      - 'core/**'
  workflow_dispatch:

jobs:
  build:
    name: Build and Test iOS
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-ios,aarch64-apple-ios-sim,x86_64-apple-ios
    
    - name: Cache Rust build
      uses: actions/cache@v4
      with:
        path: |
          core/target
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-rust-ios-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build Rust libraries for iOS
      run: |
        cd core
        cargo build --release --target x86_64-apple-ios
        cargo build --release --target aarch64-apple-ios-sim
        cargo build --release --target aarch64-apple-ios
    
    - name: Create XCFramework
      run: |
        cd ios
        mkdir -p AdBlockCoreFFI.xcframework
        
        # Create fat library for simulator
        lipo -create \
          ../core/target/x86_64-apple-ios/release/libadblock_core.a \
          ../core/target/aarch64-apple-ios-sim/release/libadblock_core.a \
          -output ./libadblock_core_sim.a
        
        # Copy the device library
        cp ../core/target/aarch64-apple-ios/release/libadblock_core.a ./libadblock_core_device.a
        
        # Create XCFramework without headers (we'll use bridging header)
        xcodebuild -create-xcframework \
          -library ./libadblock_core_sim.a \
          -library ./libadblock_core_device.a \
          -output AdBlockCoreFFI.xcframework
    
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_15.0.app
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Run SwiftLint
      run: cd ios && swiftlint lint || true
    
    - name: Build iOS app
      run: |
        cd ios
        # Ensure bridging header exists
        echo "Checking for bridging header..."
        ls -la AdBlock/AdBlock-Bridging-Header.h || true
        
        # Check XCFramework contents
        echo "Checking XCFramework..."
        ls -la AdBlockCoreFFI.xcframework/ || true
        
        # List available schemes
        xcodebuild -list || true
        
        # Build with explicit SDK and destination
        xcodebuild build \
          -scheme AdBlock \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
          -derivedDataPath build \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          SWIFT_OBJC_BRIDGING_HEADER="AdBlock/AdBlock-Bridging-Header.h" \
          LIBRARY_SEARCH_PATHS="$(SRCROOT)/AdBlockCoreFFI.xcframework/ios-x86_64-simulator"
    
    - name: Run iOS tests
      run: |
        cd ios
        xcodebuild test \
          -scheme AdBlock \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
          -derivedDataPath build \
          -enableCodeCoverage YES
    
    - name: Generate test report
      uses: kishikawakatsumi/xcresulttool@v1
      with:
        path: ios/build/Logs/Test/*.xcresult
        upload-bundles: true
      if: success() || failure()